from mahrt_pan import mahrt_pan
from numpy_version import mahrt_pan_np

import numpy as np
import time

# Example data sourced from:
#   https://github.com/ilyamaclean/ecohydrotools/tree/master/data

soil_type = 8
curve_num = 84
veg_cover = 1

evapotranspiration = np.array([
    0.08, 0.07, 0.31, 0.00, 0.02, 0.06, 0.12, 0.31, 0.45, 0.39, 0.49, 0.20, 
    0.17, 0.18, 0.25, 0.01, 0.00, 0.32, 0.33, 0.00, 0.00, 0.00, 0.59, 0.25, 
    0.78, 0.06, 0.00, 0.42, 0.14, 0.52, 0.14, 0.61, 1.43, 0.20, 0.21, 0.53, 
    0.24, 0.72, 0.54, 0.05, 0.00, 0.01, 0.10, 0.55, 1.40, 1.01, 0.92, 0.57, 
    0.44, 0.23, 0.82, 0.73, 0.86, 1.11, 0.84, 0.29, 0.68, 0.41, 0.68, 0.31, 
    0.92, 0.42, 0.56, 0.76, 0.78, 0.19, 0.34, 0.36, 0.47, 0.09, 1.37, 0.66, 
    0.36, 0.26, 0.10, 0.32, 0.45, 1.15, 1.23, 0.91, 1.45, 0.18, 0.14, 2.32, 
    1.47, 2.07, 1.06, 0.89, 1.92, 1.56, 1.44, 2.42, 1.33, 1.72, 2.08, 2.32, 
    2.78, 3.22, 1.60, 2.15, 2.28, 0.65, 0.81, 0.90, 0.78, 2.58, 1.23, 2.79, 
    3.33, 2.78, 2.59, 1.75, 3.38, 2.25, 1.99, 2.24, 1.38, 0.69, 2.95, 0.65, 
    0.31, 3.14, 2.77, 3.21, 1.70, 0.00, 1.88, 3.29, 2.35, 3.65, 0.57, 0.78, 
    2.32, 3.68, 1.49, 0.42, 1.05, 3.30, 2.50, 2.88, 3.93, 4.01, 0.96, 3.20, 
    5.76, 5.27, 1.12, 0.12, 2.34, 1.55, 1.85, 2.61, 1.00, 3.11, 3.49, 1.87, 
    3.82, 2.16, 3.09, 3.02, 2.13, 3.95, 3.66, 4.75, 4.81, 4.58, 4.74, 5.37, 
    5.69, 5.74, 6.16, 5.01, 3.02, 3.82, 2.94, 2.89, 2.07, 0.94, 0.61, 1.27, 
    1.47, 3.41, 4.09, 2.93, 2.93, 6.06, 4.69, 4.88, 3.26, 3.26, 3.00, 1.28, 
    4.43, 3.64, 3.77, 2.78, 2.72, 3.29, 2.08, 3.24, 4.36, 2.60, 2.86, 3.48, 
    5.21, 2.18, 2.72, 4.31, 2.00, 0.65, 3.74, 3.69, 3.74, 2.54, 4.25, 3.72, 
    4.12, 3.25, 1.37, 2.40, 3.31, 3.13, 1.49, 2.22, 2.30, 1.15, 3.95, 2.71, 
    3.78, 4.34, 3.46, 1.21, 2.49, 4.64, 2.21, 3.03, 3.29, 3.06, 4.07, 3.98, 
    2.08, 1.94, 1.99, 3.45, 2.06, 0.76, 1.99, 3.22, 2.88, 2.53, 2.26, 2.78, 
    2.60, 3.51, 2.01, 2.98, 2.24, 1.58, 0.31, 2.41, 2.25, 2.33, 1.49, 2.56, 
    1.84, 2.85, 1.12, 2.20, 2.11, 1.08, 2.15, 1.86, 0.76, 1.76, 1.25, 1.64, 
    1.52, 2.18, 1.98, 0.86, 0.51, 1.19, 1.43, 1.75, 2.28, 2.06, 1.71, 2.62, 
    3.52, 0.10, 1.21, 1.65, 1.69, 2.12, 1.15, 1.26, 1.80, 0.77, 0.05, 0.51, 
    0.42, 0.93, 0.36, 0.41, 0.48, 0.01, 0.08, 1.31, 0.79, 0.52, 0.49, 0.76, 
    0.68, 1.31, 0.82, 0.57, 0.31, 0.05, 0.09, 0.79, 0.55, 0.07, 0.08, 1.07, 
    1.41, 1.96, 0.38, 0.35, 0.20, 0.34, 0.16, 0.36, 0.08, 0.08, 0.28, 0.08, 
    0.27, 0.00, 0.08, 0.74, 0.80, 0.05, 0.08, 0.21, 0.17, 0.11, 0.45, 0.11, 
    0.08, 0.25, 0.09, 0.37, 0.26, 0.10, 0.47, 0.05, 0.06, 0.50, 0.57, 0.06, 
    0.06, 0.23, 0.38, 0.71, 0.72,
], dtype='float32')

precipitation = np.array([
    1.98, 0.00, 0.00, 0.00, 0.00, 0.00, 1.26, 0.88, 4.86, 0.52, 1.44, 19.61, 
    2.03, 1.35, 0.01, 0.15, 0.16, 0.00, 0.00, 0.00, 4.69, 1.54, 0.00, 0.00, 
    0.00, 2.56, 5.99, 5.04, 12.88, 2.94, 7.95, 9.69, 12.94, 6.35, 5.92, 1.74, 
    14.27, 1.16, 0.14, 0.45, 0.00, 0.01, 3.73, 7.66, 3.51, 0.00, 0.00, 0.00, 
    0.00, 0.79, 0.00, 0.13, 1.73, 0.19, 0.01, 4.04, 4.45, 3.81, 4.45, 1.39, 
    5.98, 2.41, 6.88, 13.50, 4.52, 7.59, 1.23, 0.39, 0.00, 1.27, 0.00, 0.00, 
    0.02, 0.00, 0.00, 0.00, 0.00, 1.52, 3.87, 11.68, 0.00, 6.65, 0.00, 0.00, 
    0.00, 0.00, 8.18, 4.67, 1.54, 8.97, 0.10, 0.00, 3.77, 0.00, 0.00, 0.00, 
    0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 
    0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.55, 0.00, 0.37, 0.00, 8.33, 3.54, 
    0.91, 0.00, 0.00, 0.00, 13.83, 4.29, 0.00, 0.00, 0.00, 0.00, 2.43, 3.96, 
    2.46, 5.27, 7.69, 6.14, 0.37, 3.13, 0.69, 0.00, 0.00, 0.00, 0.00, 0.00, 
    0.00, 6.28, 0.00, 2.40, 0.00, 0.00, 0.00, 1.33, 0.30, 11.28, 2.48, 14.62, 
    0.00, 7.39, 0.44, 0.61, 1.69, 0.00, 0.00, 0.00, 0.02, 0.00, 0.00, 0.00, 
    0.00, 0.00, 0.00, 0.00, 0.00, 2.59, 0.00, 0.00, 0.00, 10.14, 20.42, 14.50, 
    2.97, 0.00, 0.00, 0.08, 0.00, 0.00, 0.00, 0.00, 0.15, 0.00, 4.93, 11.66, 
    0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 22.45, 6.33, 15.50, 23.74, 7.57, 0.00, 
    0.00, 7.11, 1.71, 0.87, 4.72, 27.70, 0.37, 0.64, 14.78, 7.00, 0.85, 0.85, 
    0.16, 0.79, 0.67, 6.11, 0.96, 0.31, 1.62, 0.00, 1.33, 12.69, 0.00, 10.23, 
    3.28, 0.18, 0.08, 4.92, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 
    7.62, 2.44, 2.38, 0.00, 33.63, 4.75, 1.84, 0.32, 0.00, 6.78, 6.58, 0.01, 
    3.08, 0.32, 4.92, 3.73, 1.00, 3.20, 7.52, 0.00, 0.00, 0.00, 10.36, 0.00, 
    3.91, 2.61, 0.00, 0.00, 3.42, 12.37, 8.93, 2.36, 10.43, 2.85, 4.72, 0.00, 
    0.49, 0.00, 0.86, 7.75, 1.72, 0.01, 0.04, 1.58, 0.00, 0.00, 0.00, 0.03, 
    0.00, 0.52, 0.10, 12.50, 10.05, 4.85, 10.23, 2.52, 0.43, 1.53, 0.00, 0.00, 
    0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.04, 0.73, 0.20, 6.25, 3.85, 0.81, 
    0.82, 5.03, 6.34, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.03, 0.29, 0.00, 
    0.00, 2.57, 1.55, 1.31, 1.60, 2.16, 6.64, 3.02, 4.66, 2.30, 2.73, 0.20, 
    0.71, 0.00, 0.00, 8.87, 1.03, 0.84, 26.09, 2.46, 0.65, 5.39, 10.22, 3.98, 
    4.48, 2.29, 1.09, 0.00, 0.65, 0.21, 2.48, 0.95, 1.26, 0.99, 10.48, 19.28, 
    0.62, 5.98, 10.01, 13.62, 13.86,
], dtype='float32')

expected = {
    'layer_1': np.array([
        0.38880000, 0.35120000, 0.34873000, 0.35152000, 0.35132000, 0.35090000,
        0.37544000, 0.36708000, 0.41900000, 0.36271750, 0.38024750, 0.41900000,
        0.39918262, 0.38734262, 0.36101262, 0.36597262, 0.36641262, 0.36017262,
        0.35975262, 0.36272262, 0.41900000, 0.39633649, 0.36117649, 0.36398649,
        0.35843649, 0.41605649, 0.41900000, 0.41900000, 0.41900000, 0.41900000,
        0.41900000, 0.41900000, 0.41900000, 0.41900000, 0.41900000, 0.41476677,
        0.41900000, 0.40398293, 0.38582293, 0.39652293, 0.38842293, 0.38852293,
        0.41900000, 0.41900000, 0.41900000, 0.38167761, 0.38156761, 0.38414761,
        0.38487761, 0.40233761, 0.38119761, 0.38387761, 0.41397761, 0.38154761,
        0.37972761, 0.41900000, 0.41900000, 0.41900000, 0.41900000, 0.41674938,
        0.41900000, 0.41900000, 0.41900000, 0.41900000, 0.41900000, 0.41900000,
        0.41900000, 0.40346686, 0.39459686, 0.41900000, 0.38609052, 0.39182052,
        0.39456052, 0.39482052, 0.39616052, 0.39386052, 0.39224052, 0.41519052,
        0.41900000, 0.41900000, 0.38329937, 0.41900000, 0.39599190, 0.37405190,
        0.38023190, 0.37276190, 0.41900000, 0.41900000, 0.40473519, 0.41900000,
        0.38088743, 0.36774743, 0.41900000, 0.37313606, 0.36781606, 0.36333606,
        0.35641606, 0.34923606, 0.36221606, 0.35511606, 0.35166606, 0.36568606,
        0.36343606, 0.36172606, 0.36202606, 0.34324606, 0.35416606, 0.33733606,
        0.32914606, 0.33131606, 0.33043606, 0.33624606, 0.31819606, 0.32435926,
        0.33746606, 0.32252606, 0.33581391, 0.33477606, 0.41900000, 0.40771175,
        0.36140175, 0.31550175, 0.31137923, 0.30130178, 0.41900000, 0.41900000,
        0.32677226, 0.31079226, 0.30889467, 0.29225404, 0.35688300, 0.40758015,
        0.36543815, 0.40565977, 0.41900000, 0.41900000, 0.34462537, 0.37664537,
        0.33567537, 0.31626537, 0.29846970, 0.28204230, 0.29730728, 0.28439425,
        0.24682257, 0.34478099, 0.31413537, 0.36921301, 0.30309537, 0.29838381,
        0.29084545, 0.30290409, 0.30721913, 0.41900000, 0.33715366, 0.41900000,
        0.28712503, 0.41900000, 0.30427674, 0.29654208, 0.31967463, 0.28137674,
        0.25614499, 0.22287642, 0.19266117, 0.16646195, 0.13981848, 0.10766825,
        0.09100000, 0.09100000, 0.09100000, 0.09100000, 0.09100000, 0.11818645,
        0.09953952, 0.09100000, 0.09100000, 0.29467386, 0.41900000, 0.41900000,
        0.32899004, 0.27747555, 0.23799999, 0.21410596, 0.18983691, 0.13538475,
        0.09689060, 0.09100000, 0.09100000, 0.09100000, 0.16731619, 0.39186158,
        0.22243448, 0.18833246, 0.15412322, 0.13085103, 0.10876430, 0.09100000,
        0.41900000, 0.34919835, 0.41900000, 0.41900000, 0.38365980, 0.24364175,
        0.19435312, 0.31993774, 0.31333098, 0.27737293, 0.35047383, 0.41900000,
        0.24845020, 0.22685044, 0.41900000, 0.38406891, 0.25804839, 0.24044406,
        0.20587612, 0.19434208, 0.19947351, 0.30260067, 0.28264824, 0.25565684,
        0.27442051, 0.25115609, 0.25605420, 0.41900000, 0.23366290, 0.41362940,
        0.30452663, 0.25834923, 0.22681742, 0.31604212, 0.27931634, 0.23135970,
        0.21145974, 0.18412274, 0.15514624, 0.12936742, 0.09417078, 0.09100000,
        0.22851979, 0.25902374, 0.28614545, 0.24774171, 0.41900000, 0.34387113,
        0.31981468, 0.27798960, 0.24703993, 0.35795395, 0.38858896, 0.23621769,
        0.27331293, 0.24323058, 0.32248302, 0.34938527, 0.29672149, 0.33912639,
        0.41900000, 0.24381428, 0.22288439, 0.20197770, 0.39723324, 0.24418475,
        0.30572247, 0.32171547, 0.29470168, 0.26818973, 0.31482307, 0.41900000,
        0.40614745, 0.30653440, 0.41900000, 0.32341618, 0.39162817, 0.27217618,
        0.26935863, 0.25020684, 0.25150737, 0.40146987, 0.31879618, 0.29709597,
        0.28079243, 0.29690390, 0.27117374, 0.25302439, 0.23956067, 0.21838837,
        0.18879241, 0.20529854, 0.20109439, 0.41900000, 0.41900000, 0.36515861,
        0.41900000, 0.33691457, 0.30719098, 0.32592825, 0.31328619, 0.30212305,
        0.29510973, 0.28837762, 0.28792782, 0.28694738, 0.28528630, 0.28840564,
        0.29126840, 0.29530009, 0.29207457, 0.41407975, 0.37318454, 0.31307307,
        0.31745520, 0.39808768, 0.41900000, 0.32780391, 0.31461073, 0.31312391,
        0.31267391, 0.30558391, 0.30507128, 0.30985242, 0.31710391, 0.30161391,
        0.29265402, 0.33054748, 0.34512640, 0.34249506, 0.35041055, 0.35893569,
        0.41900000, 0.37767422, 0.41494972, 0.37326499, 0.38208499, 0.33593499,
        0.34435499, 0.33329499, 0.33249499, 0.41900000, 0.34973424, 0.35366424,
        0.41900000, 0.38925653, 0.35570653, 0.41900000, 0.41900000, 0.41900000,
        0.41900000, 0.40159165, 0.38123165, 0.35763165, 0.37136165, 0.36455165,
        0.40636165, 0.38197165, 0.38897165, 0.38037165, 0.41900000, 0.41900000,
        0.38272239, 0.41900000, 0.41900000, 0.41900000, 0.41900000,
    ]),

    'layer_2': np.array([
        0.3499579, 0.3518632, 0.3516668, 0.3515200, 0.3515095, 0.3514684, 
        0.3513768, 0.3524168, 0.3529132, 0.3560122, 0.3560896, 0.3571922, 
        0.3601932, 0.3620479, 0.3631810, 0.3630674, 0.3632126, 0.3632042, 
        0.3628789, 0.3627226, 0.3627226, 0.3655365, 0.3667660, 0.3663549, 
        0.3658260, 0.3654249, 0.3679565, 0.3702876, 0.3726496, 0.3746934, 
        0.3768350, 0.3786222, 0.3798885, 0.3817388, 0.3834913, 0.3849878, 
        0.3863505, 0.3876040, 0.3881387, 0.3879966, 0.3884229, 0.3884177, 
        0.3883703, 0.3896123, 0.3903449, 0.3912460, 0.3902834, 0.3895476, 
        0.3890460, 0.3887166, 0.3889660, 0.3881934, 0.3875250, 0.3882634, 
        0.3874855, 0.3869450, 0.3881898, 0.3895146, 0.3906309, 0.3918862, 
        0.3926452, 0.3937419, 0.3947100, 0.3955245, 0.3962878, 0.3973234, 
        0.3982283, 0.3990774, 0.3990495, 0.3987795, 0.3990695, 0.3980731, 
        0.3975710, 0.3972837, 0.3971079, 0.3968921, 0.3965037, 0.3956853, 
        0.3960131, 0.3966835, 0.3970362, 0.3962546, 0.3973182, 0.3960308, 
        0.3941582, 0.3923724, 0.3908340, 0.3917739, 0.3921247, 0.3919341, 
        0.3925295, 0.3906737, 0.3888274, 0.3894308, 0.3875213, 0.3853150, 
        0.3827529, 0.3797413, 0.3773740, 0.3754845, 0.3732661, 0.3718440, 
        0.3711097, 0.3702524, 0.3694155, 0.3676882, 0.3658187, 0.3637676, 
        0.3606934, 0.3576529, 0.3549729, 0.3528250, 0.3502171, 0.3475243, 
        0.3453187, 0.3437471, 0.3419846, 0.3413129, 0.3394334, 0.3430696, 
        0.3461386, 0.3452491, 0.3425503, 0.3397018, 0.3376396, 0.3417076, 
        0.3445828, 0.3419607, 0.3395869, 0.3366206, 0.3351770, 0.3358517, 
        0.3382171, 0.3376413, 0.3402580, 0.3439741, 0.3471727, 0.3453085, 
        0.3455596, 0.3435496, 0.3403493, 0.3369929, 0.3351789, 0.3324902, 
        0.3284045, 0.3243119, 0.3247459, 0.3242471, 0.3252638, 0.3238802, 
        0.3223296, 0.3203475, 0.3193836, 0.3173723, 0.3206168, 0.3203948, 
        0.3233145, 0.3215018, 0.3247504, 0.3226207, 0.3209400, 0.3187978, 
        0.3162732, 0.3130241, 0.3095723, 0.3061302, 0.3025430, 0.2985825, 
        0.2944094, 0.2902702, 0.2860447, 0.2825465, 0.2801859, 0.2774603, 
        0.2753470, 0.2732408, 0.2715803, 0.2705448, 0.2704405, 0.2772000, 
        0.2835164, 0.2826382, 0.2804106, 0.2786681, 0.2768613, 0.2733482, 
        0.2704374, 0.2673643, 0.2651784, 0.2630258, 0.2610407, 0.2601488, 
        0.2644029, 0.2623662, 0.2601982, 0.2584968, 0.2567961, 0.2547702, 
        0.2533703, 0.2599465, 0.2602291, 0.2667992, 0.2729040, 0.2766102, 
        0.2737201, 0.2722999, 0.2715844, 0.2698559, 0.2688716, 0.2710528, 
        0.2764818, 0.2744081, 0.2722576, 0.2782578, 0.2813115, 0.2792170, 
        0.2768680, 0.2748856, 0.2738786, 0.2723562, 0.2709326, 0.2693848, 
        0.2685341, 0.2674217, 0.2661428, 0.2654873, 0.2710840, 0.2695212, 
        0.2747372, 0.2727886, 0.2708903, 0.2700995, 0.2694114, 0.2670512, 
        0.2657723, 0.2640216, 0.2620835, 0.2602192, 0.2577875, 0.2553597, 
        0.2539534, 0.2528742, 0.2518573, 0.2502470, 0.2491473, 0.2572399, 
        0.2583482, 0.2574969, 0.2560942, 0.2547303, 0.2572508, 0.2623545, 
        0.2609074, 0.2591328, 0.2580248, 0.2573983, 0.2588649, 0.2583383, 
        0.2599624, 0.2666459, 0.2653790, 0.2640267, 0.2630769, 0.2684374, 
        0.2673775, 0.2662831, 0.2665260, 0.2656055, 0.2645301, 0.2645978, 
        0.2711863, 0.2769555, 0.2769118, 0.2830899, 0.2831524, 0.2877130, 
        0.2867771, 0.2854904, 0.2842430, 0.2836028, 0.2892278, 0.2891278, 
        0.2885227, 0.2874958, 0.2864500, 0.2852368, 0.2841454, 0.2825334, 
        0.2803859, 0.2799592, 0.2790121, 0.2778306, 0.2839996, 0.2896338, 
        0.2928048, 0.2984514, 0.2985737, 0.2983875, 0.2990003, 0.2990510, 
        0.2989780, 0.2983534, 0.2979981, 0.2976181, 0.2972003, 0.2970256, 
        0.2968328, 0.2960101, 0.2955588, 0.2951690, 0.3008567, 0.3040731, 
        0.3039898, 0.3036618, 0.3079515, 0.3132039, 0.3135720, 0.3135976, 
        0.3135265, 0.3130681, 0.3125162, 0.3122224, 0.3120618, 0.3117508, 
        0.3107381, 0.3093858, 0.3098501, 0.3109991, 0.3120562, 0.3135233, 
        0.3157097, 0.3206847, 0.3234921, 0.3280229, 0.3301376, 0.3326929, 
        0.3327129, 0.3332950, 0.3332529, 0.3328255, 0.3367132, 0.3373379, 
        0.3381121, 0.3420460, 0.3443171, 0.3448286, 0.3483004, 0.3517774, 
        0.3550965, 0.3581601, 0.3602843, 0.3611369, 0.3608248, 0.3612990, 
        0.3612143, 0.3634453, 0.3643401, 0.3653085, 0.3657616, 0.3683920, 
        0.3708908, 0.3713613, 0.3735433, 0.3754424, 0.3772414,
    ]),

    'surplus': np.array([
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 1.342500000, 0.000000000, 
        0.000000000, 16.424875000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        1.876131250, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 3.437824687, 2.405433453, 10.496161780, 0.478353691, 
        5.775436007, 7.382164207, 10.307055996, 4.392203196, 4.045093037, 
        0.000000000, 12.523838385, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 2.151146466, 5.930089142, 1.414084685, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        2.299880451, 2.587386428, 2.141517107, 2.709441252, 0.000000000, 
        4.226469189, 0.948145730, 5.400238443, 11.966226521, 3.014915195, 
        6.416169435, 0.030360963, 0.000000000, 0.000000000, 0.216342915, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 2.138025769, 10.133124481, 
        0.000000000, 5.427468257, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 6.269594844, 2.887115102, 0.000000000, 6.877759347, 
        0.000000000, 0.000000000, 1.631371379, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 2.954302810, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 8.204112723, 
        0.425382034, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.004105478, 0.000000000, 0.125919271, 3.047111695, 
        2.189756110, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 4.491705198, 0.000000000, 
        8.868626399, 0.000000000, 0.358290238, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 13.692794545, 6.808422991, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 5.299912032, 0.332671729, 
        7.381515110, 14.898380031, 0.677471240, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 21.551550146, 
        0.000000000, 0.000000000, 3.475525928, 0.506287949, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        4.015483680, 0.000000000, 0.006267751, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 24.051765802, 
        0.058440250, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.393803762, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 1.673413454, 0.000000000, 
        0.000000000, 0.000000000, 0.009530319, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 6.016829734, 
        1.163523377, 0.000000000, 4.088218347, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 1.077103936, 2.499453770, 0.069550479, 3.375503558, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.001501201, 0.000000000, 0.000000000, 0.000000000, 0.399153320, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        1.399695654, 0.000000000, 0.049224883, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 4.210749627, 
        0.000000000, 0.000000000, 22.007712146, 0.000000000, 0.000000000, 
        1.629326538, 6.471860211, 0.566767201, 1.246928841, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 
        0.000000000, 0.000000000, 0.000000000, 7.548082399, 16.721178279, 
        0.000000000, 3.489119365, 7.557163397, 11.105805227, 11.431014966,
    ]),
}



def _evaluate(label: str, **kwargs):
    """ Ensure given estimates are close to the expected values """
    estimates: dict = mahrt_pan(**{
        'evapotranspiration' : evapotranspiration,
        'precipitation'      : precipitation,
        'soil_type'          : soil_type,
        'cn'                 : curve_num,
        'cover'              : veg_cover,
        'timestep'           : 24 * 60 * 60,
    } | kwargs)
    assert(set(estimates) == set(expected)), (
        f'Expected keys {list(expected)} but found {list(estimates)}')

    # Check that error is < 2% (to allow for floating point / rounding errors)
    for key, expect in expected.items():
        estim = np.atleast_2d(estimates[key])[0]
        error = sum(abs(expect-estim)) / sum(expect)
        assert(error < 0.02), f'{label}: found {error:.1%} error for {key}'
    print(f'{label:>15} : Success')


def test_original():
    """ Simple test of original test configuration from the reference """
    _evaluate('Original')


def test_batch():
    """ Test vectorized operation over batch of series """
    batched = lambda v, batches=2: np.stack([v]*batches, axis=0)
    _evaluate('Batched', **{
        'evapotranspiration' : batched(evapotranspiration),
        'precipitation'      : batched(precipitation),
        'axis'               : 1,
    })


def test_dynamic():
    """ Test temporally dynamic hyperparameters """
    dynamic = np.ones_like(evapotranspiration)
    _evaluate('Dynamic', **{
        'soil_type' : soil_type * dynamic,
        'cn'        : curve_num * dynamic,
        'cover'     : veg_cover * dynamic,
    })


def test_batch_dynamic():
    """ Test batch vectorization + temporally dynamic hyperparameters """
    dynamic = np.ones_like(evapotranspiration)
    batched = lambda v, batches=2: np.stack([v]*batches, axis=0)
    _evaluate('Batch+Dynamic', **{
        'evapotranspiration' : batched(evapotranspiration),
        'precipitation'      : batched(precipitation),
        'soil_type'          : batched(soil_type * dynamic),
        'cn'                 : batched(curve_num * dynamic),
        'cover'              : batched(veg_cover * dynamic),
        'axis'               : 1,
    })


def test_timing():
    """ Check how long the JAX version takes to run versus numpy """
    batched = lambda v, batches=1024: np.stack([v]*batches, axis=0)
    long_ts = lambda v, duplicate=150: np.tile(v, (duplicate,))

    def timed(f):
        start = time.time()
        np.asarray( f(**{
            'evapotranspiration' : batched( long_ts(evapotranspiration) ),
            'precipitation'      : batched( long_ts(precipitation) ),
            'soil_type'          : soil_type,
            'cn'                 : curve_num,
            'cover'              : veg_cover,
            'timestep'           : 24 * 60 * 60,
            'axis'               : 1,
        })['layer_1'] )
        end = time.time()
        print(f'{f.__name__:>15} completed in {end-start:.1f} seconds')
    timed(mahrt_pan_np)
    timed(mahrt_pan)


if __name__ == '__main__':
    test_original()
    test_batch()
    test_dynamic()
    test_batch_dynamic()
    test_timing()    

